# -*- coding: utf-8 -*-

"""
 DICOM software development library (SDL)
 Copyright (c) 2010-2020, Kim, Tae-Sung. All rights reserved.
 See copyright.txt for details.
"""

from bs4 import BeautifulSoup

FILENAME_PART06XML = '../dicomsdl.reference/part05.xml'

soup = BeautifulSoup(open(FILENAME_PART06XML), "lxml")

vr_list = []

# find table "DICOM Value Representations"
for tb in soup.find_all('table'):
    if 'Value Representations' in tb.find('caption').text:
        break
# take tbody from table
tb = tb.find('tbody')
# take rows from the tbody
for tr in tb.find_all('tr'):
    # first cell contains VR with two characters
    para = tr.find('para')
    vr = para.text
    assert(len(vr) == 2)
    vr_list.append(vr)


frag = ''
for i, v in enumerate(vr_list):
    if i%16 == 0:
        frag += '    '
    frag += '%s,'%(v)
    if i%16 == 15:
        frag += '\n'
    else:
        frag += ' '
codelet = """
// UID const names are generated by 'codegen_vr.py'.
// Place $$Generated code in 'src/include/dicom.h'.
{frag}
// $$End of generated code.
""".format(frag=frag)
print(codelet)


frag = ''
for i, v in enumerate(vr_list):
    if i%3 == 0:
        frag += '    '
    frag += '.value("%s", VR::%s)'%(v, v)
    if i%3 == 2:
        frag += '\n'

codelet = """
// UID const names are generated by 'codegen_vr.py'.
// Place $$Generated code in 'src/python/_dicomsdl.cpp'.
{frag}// $$End of generated code.
""".format(frag=frag)
print(codelet)


frag = ''
for i, v in enumerate(vr_list):
    frag += '    case VR::%s: return "%s"; break;\n'%(v, v)

codelet = """
// UID const names are generated by 'codegen_vr.py'.
// Place $$Generated code in 'src/lib/datadict.cc'.
{frag}// $$End of generated code.
""".format(frag=frag)
print(codelet)


frag = ''
for i, v in enumerate(vr_list):
    hi = ord(v[0])
    lo = ord(v[1])
    frag += "    case 0x%04x: vr = VR::%s; break;\n"%((lo*256+hi), v)

codelet = """
// codelet to convert uint16le to vr_t are generated by 'codegen_vr.py'.
// Place $$Generated code in 'src/lib/datadict.cc'.
{frag}// $$End of generated code.
""".format(frag=frag)
print(codelet)